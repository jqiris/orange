// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: mahjong.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//base struct
type MjRoomConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Zimo        int32  `protobuf:"varint,2,opt,name=zimo,proto3" json:"zimo,omitempty"`
	Jiangdui    bool   `protobuf:"varint,3,opt,name=jiangdui,proto3" json:"jiangdui,omitempty"`
	Hsz         bool   `protobuf:"varint,4,opt,name=hsz,proto3" json:"hsz,omitempty"`
	Dianganghua int32  `protobuf:"varint,5,opt,name=dianganghua,proto3" json:"dianganghua,omitempty"`
	Menqing     bool   `protobuf:"varint,6,opt,name=menqing,proto3" json:"menqing,omitempty"`
	Tiandihu    bool   `protobuf:"varint,7,opt,name=tiandihu,proto3" json:"tiandihu,omitempty"`
	BaseScore   int32  `protobuf:"varint,8,opt,name=baseScore,proto3" json:"baseScore,omitempty"`
	MaxFan      int32  `protobuf:"varint,9,opt,name=maxFan,proto3" json:"maxFan,omitempty"`
	MaxGames    int32  `protobuf:"varint,10,opt,name=maxGames,proto3" json:"maxGames,omitempty"`
	Creator     int64  `protobuf:"varint,11,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (x *MjRoomConf) Reset() {
	*x = MjRoomConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MjRoomConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MjRoomConf) ProtoMessage() {}

func (x *MjRoomConf) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MjRoomConf.ProtoReflect.Descriptor instead.
func (*MjRoomConf) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{0}
}

func (x *MjRoomConf) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MjRoomConf) GetZimo() int32 {
	if x != nil {
		return x.Zimo
	}
	return 0
}

func (x *MjRoomConf) GetJiangdui() bool {
	if x != nil {
		return x.Jiangdui
	}
	return false
}

func (x *MjRoomConf) GetHsz() bool {
	if x != nil {
		return x.Hsz
	}
	return false
}

func (x *MjRoomConf) GetDianganghua() int32 {
	if x != nil {
		return x.Dianganghua
	}
	return 0
}

func (x *MjRoomConf) GetMenqing() bool {
	if x != nil {
		return x.Menqing
	}
	return false
}

func (x *MjRoomConf) GetTiandihu() bool {
	if x != nil {
		return x.Tiandihu
	}
	return false
}

func (x *MjRoomConf) GetBaseScore() int32 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *MjRoomConf) GetMaxFan() int32 {
	if x != nil {
		return x.MaxFan
	}
	return 0
}

func (x *MjRoomConf) GetMaxGames() int32 {
	if x != nil {
		return x.MaxGames
	}
	return 0
}

func (x *MjRoomConf) GetCreator() int64 {
	if x != nil {
		return x.Creator
	}
	return 0
}

type MjDissolveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime int64  `protobuf:"varint,1,opt,name=endTime,proto3" json:"endTime,omitempty"`
	States  []bool `protobuf:"varint,2,rep,packed,name=states,proto3" json:"states,omitempty"`
}

func (x *MjDissolveData) Reset() {
	*x = MjDissolveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MjDissolveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MjDissolveData) ProtoMessage() {}

func (x *MjDissolveData) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MjDissolveData.ProtoReflect.Descriptor instead.
func (*MjDissolveData) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{1}
}

func (x *MjDissolveData) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *MjDissolveData) GetStates() []bool {
	if x != nil {
		return x.States
	}
	return nil
}

type MjTingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fan     int32  `protobuf:"varint,1,opt,name=fan,proto3" json:"fan,omitempty"`
	Pattern string `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`
}

func (x *MjTingData) Reset() {
	*x = MjTingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MjTingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MjTingData) ProtoMessage() {}

func (x *MjTingData) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MjTingData.ProtoReflect.Descriptor instead.
func (*MjTingData) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{2}
}

func (x *MjTingData) GetFan() int32 {
	if x != nil {
		return x.Fan
	}
	return 0
}

func (x *MjTingData) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

type MjActionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string        `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Owner    *MjSeat       `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	State    string        `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	PayTimes int32         `protobuf:"varint,4,opt,name=payTimes,proto3" json:"payTimes,omitempty"`
	Ref      *MjActionData `protobuf:"bytes,5,opt,name=ref,proto3" json:"ref,omitempty"`
	Targets  []int32       `protobuf:"varint,6,rep,packed,name=targets,proto3" json:"targets,omitempty"`
	Score    int32         `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`
	Iszimo   bool          `protobuf:"varint,8,opt,name=iszimo,proto3" json:"iszimo,omitempty"`
}

func (x *MjActionData) Reset() {
	*x = MjActionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MjActionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MjActionData) ProtoMessage() {}

func (x *MjActionData) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MjActionData.ProtoReflect.Descriptor instead.
func (*MjActionData) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{3}
}

func (x *MjActionData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MjActionData) GetOwner() *MjSeat {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *MjActionData) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *MjActionData) GetPayTimes() int32 {
	if x != nil {
		return x.PayTimes
	}
	return 0
}

func (x *MjActionData) GetRef() *MjActionData {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *MjActionData) GetTargets() []int32 {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *MjActionData) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *MjActionData) GetIszimo() bool {
	if x != nil {
		return x.Iszimo
	}
	return false
}

type MjQiangGangData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TurnSeat *MjSeat `protobuf:"bytes,1,opt,name=turnSeat,proto3" json:"turnSeat,omitempty"`
	SeatData *MjSeat `protobuf:"bytes,2,opt,name=seatData,proto3" json:"seatData,omitempty"`
	Pai      int32   `protobuf:"varint,3,opt,name=pai,proto3" json:"pai,omitempty"`
	IsValid  bool    `protobuf:"varint,4,opt,name=isValid,proto3" json:"isValid,omitempty"`
}

func (x *MjQiangGangData) Reset() {
	*x = MjQiangGangData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MjQiangGangData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MjQiangGangData) ProtoMessage() {}

func (x *MjQiangGangData) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MjQiangGangData.ProtoReflect.Descriptor instead.
func (*MjQiangGangData) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{4}
}

func (x *MjQiangGangData) GetTurnSeat() *MjSeat {
	if x != nil {
		return x.TurnSeat
	}
	return nil
}

func (x *MjQiangGangData) GetSeatData() *MjSeat {
	if x != nil {
		return x.SeatData
	}
	return nil
}

func (x *MjQiangGangData) GetPai() int32 {
	if x != nil {
		return x.Pai
	}
	return 0
}

func (x *MjQiangGangData) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

type MjSeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid           int64                 `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Score            int32                 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	Name             string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Ready            bool                  `protobuf:"varint,4,opt,name=ready,proto3" json:"ready,omitempty"`
	Seatindex        int32                 `protobuf:"varint,5,opt,name=seatindex,proto3" json:"seatindex"`
	NumZiMo          int32                 `protobuf:"varint,6,opt,name=numZiMo,proto3" json:"numZiMo,omitempty"`
	NumJiePao        int32                 `protobuf:"varint,7,opt,name=numJiePao,proto3" json:"numJiePao,omitempty"`
	NumDianPao       int32                 `protobuf:"varint,8,opt,name=numDianPao,proto3" json:"numDianPao,omitempty"`
	NumAnGang        int32                 `protobuf:"varint,9,opt,name=numAnGang,proto3" json:"numAnGang,omitempty"`
	NumMingGang      int32                 `protobuf:"varint,10,opt,name=numMingGang,proto3" json:"numMingGang,omitempty"`
	NumChaJiao       int32                 `protobuf:"varint,11,opt,name=numChaJiao,proto3" json:"numChaJiao,omitempty"`
	Ip               string                `protobuf:"bytes,12,opt,name=ip,proto3" json:"ip,omitempty"`
	Online           bool                  `protobuf:"varint,13,opt,name=online,proto3" json:"online,omitempty"`
	Game             *MjGameData           `protobuf:"bytes,14,opt,name=game,proto3" json:"game,omitempty"`
	Holds            []int32               `protobuf:"varint,15,rep,packed,name=holds,proto3" json:"holds,omitempty"`
	Folds            []int32               `protobuf:"varint,16,rep,packed,name=folds,proto3" json:"folds,omitempty"`
	Angangs          []int32               `protobuf:"varint,17,rep,packed,name=angangs,proto3" json:"angangs,omitempty"`
	Diang            []int32               `protobuf:"varint,18,rep,packed,name=diang,proto3" json:"diang,omitempty"`
	Wangangs         []int32               `protobuf:"varint,19,rep,packed,name=wangangs,proto3" json:"wangangs,omitempty"`
	Pengs            []int32               `protobuf:"varint,20,rep,packed,name=pengs,proto3" json:"pengs,omitempty"`
	Que              int32                 `protobuf:"varint,21,opt,name=que,proto3" json:"que,omitempty"`
	Huanpais         []int32               `protobuf:"varint,22,rep,packed,name=huanpais,proto3" json:"huanpais,omitempty"`
	CountMap         map[int32]int32       `protobuf:"bytes,23,rep,name=countMap,proto3" json:"countMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TingMap          map[int32]*MjTingData `protobuf:"bytes,24,rep,name=tingMap,proto3" json:"tingMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Pattern          string                `protobuf:"bytes,25,opt,name=pattern,proto3" json:"pattern,omitempty"`
	CanGang          bool                  `protobuf:"varint,26,opt,name=canGang,proto3" json:"canGang,omitempty"`
	GangPai          []int32               `protobuf:"varint,27,rep,packed,name=gangPai,proto3" json:"gangPai,omitempty"`
	CanPeng          bool                  `protobuf:"varint,28,opt,name=canPeng,proto3" json:"canPeng,omitempty"`
	CanHu            bool                  `protobuf:"varint,29,opt,name=canHu,proto3" json:"canHu,omitempty"`
	CanChuPai        bool                  `protobuf:"varint,30,opt,name=canChuPai,proto3" json:"canChuPai,omitempty"`
	GuoHuFan         int32                 `protobuf:"varint,31,opt,name=guoHuFan,proto3" json:"guoHuFan,omitempty"`
	Hued             bool                  `protobuf:"varint,32,opt,name=hued,proto3" json:"hued,omitempty"`
	Iszimo           bool                  `protobuf:"varint,33,opt,name=iszimo,proto3" json:"iszimo,omitempty"`
	IsGangHu         bool                  `protobuf:"varint,34,opt,name=isGangHu,proto3" json:"isGangHu,omitempty"`
	IsMenQing        bool                  `protobuf:"varint,35,opt,name=isMenQing,proto3" json:"isMenQing,omitempty"`
	IsZhongZhang     bool                  `protobuf:"varint,36,opt,name=isZhongZhang,proto3" json:"isZhongZhang,omitempty"`
	IsJinGouHu       bool                  `protobuf:"varint,37,opt,name=isJinGouHu,proto3" json:"isJinGouHu,omitempty"`
	IsQiangGangHu    bool                  `protobuf:"varint,38,opt,name=isQiangGangHu,proto3" json:"isQiangGangHu,omitempty"`
	IsHaiDiHu        bool                  `protobuf:"varint,39,opt,name=isHaiDiHu,proto3" json:"isHaiDiHu,omitempty"`
	IsTianHu         bool                  `protobuf:"varint,40,opt,name=isTianHu,proto3" json:"isTianHu,omitempty"`
	IsDiHu           bool                  `protobuf:"varint,41,opt,name=isDiHu,proto3" json:"isDiHu,omitempty"`
	Qingyise         bool                  `protobuf:"varint,42,opt,name=qingyise,proto3" json:"qingyise,omitempty"`
	Actions          []*MjActionData       `protobuf:"bytes,43,rep,name=actions,proto3" json:"actions,omitempty"`
	Fan              int32                 `protobuf:"varint,44,opt,name=fan,proto3" json:"fan,omitempty"`
	LastFangGangSeat int32                 `protobuf:"varint,45,opt,name=lastFangGangSeat,proto3" json:"lastFangGangSeat,omitempty"`
	Numofgen         int32                 `protobuf:"varint,46,opt,name=numofgen,proto3" json:"numofgen,omitempty"`
	Diangangs        []int32               `protobuf:"varint,47,rep,packed,name=diangangs,proto3" json:"diangangs,omitempty"`
}

func (x *MjSeat) Reset() {
	*x = MjSeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MjSeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MjSeat) ProtoMessage() {}

func (x *MjSeat) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MjSeat.ProtoReflect.Descriptor instead.
func (*MjSeat) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{5}
}

func (x *MjSeat) GetUserid() int64 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *MjSeat) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *MjSeat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MjSeat) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *MjSeat) GetSeatindex() int32 {
	if x != nil {
		return x.Seatindex
	}
	return 0
}

func (x *MjSeat) GetNumZiMo() int32 {
	if x != nil {
		return x.NumZiMo
	}
	return 0
}

func (x *MjSeat) GetNumJiePao() int32 {
	if x != nil {
		return x.NumJiePao
	}
	return 0
}

func (x *MjSeat) GetNumDianPao() int32 {
	if x != nil {
		return x.NumDianPao
	}
	return 0
}

func (x *MjSeat) GetNumAnGang() int32 {
	if x != nil {
		return x.NumAnGang
	}
	return 0
}

func (x *MjSeat) GetNumMingGang() int32 {
	if x != nil {
		return x.NumMingGang
	}
	return 0
}

func (x *MjSeat) GetNumChaJiao() int32 {
	if x != nil {
		return x.NumChaJiao
	}
	return 0
}

func (x *MjSeat) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *MjSeat) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *MjSeat) GetGame() *MjGameData {
	if x != nil {
		return x.Game
	}
	return nil
}

func (x *MjSeat) GetHolds() []int32 {
	if x != nil {
		return x.Holds
	}
	return nil
}

func (x *MjSeat) GetFolds() []int32 {
	if x != nil {
		return x.Folds
	}
	return nil
}

func (x *MjSeat) GetAngangs() []int32 {
	if x != nil {
		return x.Angangs
	}
	return nil
}

func (x *MjSeat) GetDiang() []int32 {
	if x != nil {
		return x.Diang
	}
	return nil
}

func (x *MjSeat) GetWangangs() []int32 {
	if x != nil {
		return x.Wangangs
	}
	return nil
}

func (x *MjSeat) GetPengs() []int32 {
	if x != nil {
		return x.Pengs
	}
	return nil
}

func (x *MjSeat) GetQue() int32 {
	if x != nil {
		return x.Que
	}
	return 0
}

func (x *MjSeat) GetHuanpais() []int32 {
	if x != nil {
		return x.Huanpais
	}
	return nil
}

func (x *MjSeat) GetCountMap() map[int32]int32 {
	if x != nil {
		return x.CountMap
	}
	return nil
}

func (x *MjSeat) GetTingMap() map[int32]*MjTingData {
	if x != nil {
		return x.TingMap
	}
	return nil
}

func (x *MjSeat) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *MjSeat) GetCanGang() bool {
	if x != nil {
		return x.CanGang
	}
	return false
}

func (x *MjSeat) GetGangPai() []int32 {
	if x != nil {
		return x.GangPai
	}
	return nil
}

func (x *MjSeat) GetCanPeng() bool {
	if x != nil {
		return x.CanPeng
	}
	return false
}

func (x *MjSeat) GetCanHu() bool {
	if x != nil {
		return x.CanHu
	}
	return false
}

func (x *MjSeat) GetCanChuPai() bool {
	if x != nil {
		return x.CanChuPai
	}
	return false
}

func (x *MjSeat) GetGuoHuFan() int32 {
	if x != nil {
		return x.GuoHuFan
	}
	return 0
}

func (x *MjSeat) GetHued() bool {
	if x != nil {
		return x.Hued
	}
	return false
}

func (x *MjSeat) GetIszimo() bool {
	if x != nil {
		return x.Iszimo
	}
	return false
}

func (x *MjSeat) GetIsGangHu() bool {
	if x != nil {
		return x.IsGangHu
	}
	return false
}

func (x *MjSeat) GetIsMenQing() bool {
	if x != nil {
		return x.IsMenQing
	}
	return false
}

func (x *MjSeat) GetIsZhongZhang() bool {
	if x != nil {
		return x.IsZhongZhang
	}
	return false
}

func (x *MjSeat) GetIsJinGouHu() bool {
	if x != nil {
		return x.IsJinGouHu
	}
	return false
}

func (x *MjSeat) GetIsQiangGangHu() bool {
	if x != nil {
		return x.IsQiangGangHu
	}
	return false
}

func (x *MjSeat) GetIsHaiDiHu() bool {
	if x != nil {
		return x.IsHaiDiHu
	}
	return false
}

func (x *MjSeat) GetIsTianHu() bool {
	if x != nil {
		return x.IsTianHu
	}
	return false
}

func (x *MjSeat) GetIsDiHu() bool {
	if x != nil {
		return x.IsDiHu
	}
	return false
}

func (x *MjSeat) GetQingyise() bool {
	if x != nil {
		return x.Qingyise
	}
	return false
}

func (x *MjSeat) GetActions() []*MjActionData {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *MjSeat) GetFan() int32 {
	if x != nil {
		return x.Fan
	}
	return 0
}

func (x *MjSeat) GetLastFangGangSeat() int32 {
	if x != nil {
		return x.LastFangGangSeat
	}
	return 0
}

func (x *MjSeat) GetNumofgen() int32 {
	if x != nil {
		return x.Numofgen
	}
	return 0
}

func (x *MjSeat) GetDiangangs() []int32 {
	if x != nil {
		return x.Diangangs
	}
	return nil
}

type MjGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conf             *MjRoomConf      `protobuf:"bytes,1,opt,name=conf,proto3" json:"conf,omitempty"`
	Uuid             string           `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	GameIndex        int32            `protobuf:"varint,3,opt,name=gameIndex,proto3" json:"gameIndex,omitempty"`
	Button           int32            `protobuf:"varint,4,opt,name=button,proto3" json:"button,omitempty"`
	Mahjongs         []int32          `protobuf:"varint,5,rep,packed,name=mahjongs,proto3" json:"mahjongs,omitempty"`
	CurrentIndex     int32            `protobuf:"varint,6,opt,name=currentIndex,proto3" json:"currentIndex,omitempty"`
	GameSeats        []*MjSeat        `protobuf:"bytes,7,rep,name=gameSeats,proto3" json:"gameSeats,omitempty"`
	NumOfQue         int32            `protobuf:"varint,8,opt,name=numOfQue,proto3" json:"numOfQue,omitempty"`
	Turn             int32            `protobuf:"varint,9,opt,name=turn,proto3" json:"turn,omitempty"`
	ChuPai           int32            `protobuf:"varint,10,opt,name=chuPai,proto3" json:"chuPai,omitempty"`
	State            string           `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	FirstHupai       int32            `protobuf:"varint,12,opt,name=firstHupai,proto3" json:"firstHupai,omitempty"`
	Yipaoduoxiang    int32            `protobuf:"varint,13,opt,name=yipaoduoxiang,proto3" json:"yipaoduoxiang,omitempty"`
	Fangpaoshumu     int32            `protobuf:"varint,14,opt,name=fangpaoshumu,proto3" json:"fangpaoshumu,omitempty"`
	ActionList       []int32          `protobuf:"varint,15,rep,packed,name=actionList,proto3" json:"actionList,omitempty"`
	HupaiList        []int32          `protobuf:"varint,16,rep,packed,name=hupaiList,proto3" json:"hupaiList,omitempty"`
	ChupaiCnt        int32            `protobuf:"varint,17,opt,name=chupaiCnt,proto3" json:"chupaiCnt,omitempty"`
	HuanpaiMethod    int32            `protobuf:"varint,18,opt,name=huanpaiMethod,proto3" json:"huanpaiMethod,omitempty"`
	QiangGangContext *MjQiangGangData `protobuf:"bytes,19,opt,name=qiangGangContext,proto3" json:"qiangGangContext,omitempty"`
	LastHuPaiSeat    int32            `protobuf:"varint,20,opt,name=lastHuPaiSeat,proto3" json:"lastHuPaiSeat,omitempty"`
	LastFangGangSeat int32            `protobuf:"varint,21,opt,name=lastFangGangSeat,proto3" json:"lastFangGangSeat,omitempty"`
	BaseInfoJson     string           `protobuf:"bytes,22,opt,name=baseInfoJson,proto3" json:"baseInfoJson,omitempty"`
}

func (x *MjGameData) Reset() {
	*x = MjGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MjGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MjGameData) ProtoMessage() {}

func (x *MjGameData) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MjGameData.ProtoReflect.Descriptor instead.
func (*MjGameData) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{6}
}

func (x *MjGameData) GetConf() *MjRoomConf {
	if x != nil {
		return x.Conf
	}
	return nil
}

func (x *MjGameData) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *MjGameData) GetGameIndex() int32 {
	if x != nil {
		return x.GameIndex
	}
	return 0
}

func (x *MjGameData) GetButton() int32 {
	if x != nil {
		return x.Button
	}
	return 0
}

func (x *MjGameData) GetMahjongs() []int32 {
	if x != nil {
		return x.Mahjongs
	}
	return nil
}

func (x *MjGameData) GetCurrentIndex() int32 {
	if x != nil {
		return x.CurrentIndex
	}
	return 0
}

func (x *MjGameData) GetGameSeats() []*MjSeat {
	if x != nil {
		return x.GameSeats
	}
	return nil
}

func (x *MjGameData) GetNumOfQue() int32 {
	if x != nil {
		return x.NumOfQue
	}
	return 0
}

func (x *MjGameData) GetTurn() int32 {
	if x != nil {
		return x.Turn
	}
	return 0
}

func (x *MjGameData) GetChuPai() int32 {
	if x != nil {
		return x.ChuPai
	}
	return 0
}

func (x *MjGameData) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *MjGameData) GetFirstHupai() int32 {
	if x != nil {
		return x.FirstHupai
	}
	return 0
}

func (x *MjGameData) GetYipaoduoxiang() int32 {
	if x != nil {
		return x.Yipaoduoxiang
	}
	return 0
}

func (x *MjGameData) GetFangpaoshumu() int32 {
	if x != nil {
		return x.Fangpaoshumu
	}
	return 0
}

func (x *MjGameData) GetActionList() []int32 {
	if x != nil {
		return x.ActionList
	}
	return nil
}

func (x *MjGameData) GetHupaiList() []int32 {
	if x != nil {
		return x.HupaiList
	}
	return nil
}

func (x *MjGameData) GetChupaiCnt() int32 {
	if x != nil {
		return x.ChupaiCnt
	}
	return 0
}

func (x *MjGameData) GetHuanpaiMethod() int32 {
	if x != nil {
		return x.HuanpaiMethod
	}
	return 0
}

func (x *MjGameData) GetQiangGangContext() *MjQiangGangData {
	if x != nil {
		return x.QiangGangContext
	}
	return nil
}

func (x *MjGameData) GetLastHuPaiSeat() int32 {
	if x != nil {
		return x.LastHuPaiSeat
	}
	return 0
}

func (x *MjGameData) GetLastFangGangSeat() int32 {
	if x != nil {
		return x.LastFangGangSeat
	}
	return 0
}

func (x *MjGameData) GetBaseInfoJson() string {
	if x != nil {
		return x.BaseInfoJson
	}
	return ""
}

type MjRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string          `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	RoomId     string          `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	GameType   string          `protobuf:"bytes,3,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`
	NumOfGames int32           `protobuf:"varint,4,opt,name=numOfGames,proto3" json:"numOfGames,omitempty"`
	CreateTime int64           `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	NextButton int32           `protobuf:"varint,6,opt,name=nextButton,proto3" json:"nextButton,omitempty"`
	Seats      []*MjSeat       `protobuf:"bytes,7,rep,name=seats,proto3" json:"seats,omitempty"`
	Conf       *MjRoomConf     `protobuf:"bytes,8,opt,name=conf,proto3" json:"conf,omitempty"`
	Dr         *MjDissolveData `protobuf:"bytes,9,opt,name=dr,proto3" json:"dr,omitempty"`
}

func (x *MjRoom) Reset() {
	*x = MjRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MjRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MjRoom) ProtoMessage() {}

func (x *MjRoom) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MjRoom.ProtoReflect.Descriptor instead.
func (*MjRoom) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{7}
}

func (x *MjRoom) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *MjRoom) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *MjRoom) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *MjRoom) GetNumOfGames() int32 {
	if x != nil {
		return x.NumOfGames
	}
	return 0
}

func (x *MjRoom) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *MjRoom) GetNextButton() int32 {
	if x != nil {
		return x.NextButton
	}
	return 0
}

func (x *MjRoom) GetSeats() []*MjSeat {
	if x != nil {
		return x.Seats
	}
	return nil
}

func (x *MjRoom) GetConf() *MjRoomConf {
	if x != nil {
		return x.Conf
	}
	return nil
}

func (x *MjRoom) GetDr() *MjDissolveData {
	if x != nil {
		return x.Dr
	}
	return nil
}

var File_mahjong_proto protoreflect.FileDescriptor

var file_mahjong_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x22, 0xa6, 0x02, 0x0a, 0x0a, 0x4d, 0x6a, 0x52, 0x6f,
	0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x69,
	0x6d, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x7a, 0x69, 0x6d, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x6a, 0x69, 0x61, 0x6e, 0x67, 0x64, 0x75, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x6a, 0x69, 0x61, 0x6e, 0x67, 0x64, 0x75, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x73,
	0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x68, 0x73, 0x7a, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x69, 0x61, 0x6e, 0x67, 0x61, 0x6e, 0x67, 0x68, 0x75, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x6e, 0x67, 0x61, 0x6e, 0x67, 0x68, 0x75, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x71, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x6d, 0x65, 0x6e, 0x71, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x61, 0x6e,
	0x64, 0x69, 0x68, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x69, 0x61, 0x6e,
	0x64, 0x69, 0x68, 0x75, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x46, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x46, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61,
	0x78, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x22, 0x42, 0x0a, 0x0e, 0x4d, 0x6a, 0x44, 0x69, 0x73, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x0a, 0x4d, 0x6a, 0x54, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x66, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0xea,
	0x01, 0x0a, 0x0c, 0x4d, 0x6a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6a, 0x53, 0x65,
	0x61, 0x74, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x03, 0x72,
	0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4d, 0x6a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03,
	0x72, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x7a, 0x69, 0x6d, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x7a, 0x69, 0x6d, 0x6f, 0x22, 0x95, 0x01, 0x0a, 0x0f,
	0x4d, 0x6a, 0x51, 0x69, 0x61, 0x6e, 0x67, 0x47, 0x61, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2a, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6a, 0x53, 0x65, 0x61,
	0x74, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x65, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x73,
	0x65, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6a, 0x53, 0x65, 0x61, 0x74, 0x52, 0x08, 0x73,
	0x65, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x61, 0x69, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x61, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x22, 0xde, 0x0b, 0x0a, 0x06, 0x4d, 0x6a, 0x53, 0x65, 0x61, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x5a, 0x69, 0x4d, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x5a, 0x69, 0x4d, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x4a, 0x69, 0x65, 0x50, 0x61, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x4a, 0x69, 0x65, 0x50, 0x61, 0x6f, 0x12, 0x1e, 0x0a, 0x0a,
	0x6e, 0x75, 0x6d, 0x44, 0x69, 0x61, 0x6e, 0x50, 0x61, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x44, 0x69, 0x61, 0x6e, 0x50, 0x61, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x75, 0x6d, 0x41, 0x6e, 0x47, 0x61, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6e, 0x75, 0x6d, 0x41, 0x6e, 0x47, 0x61, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x75,
	0x6d, 0x4d, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6e, 0x75, 0x6d, 0x4d, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x6e, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x4a, 0x69, 0x61, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x4a, 0x69, 0x61, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6a, 0x47, 0x61,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x68, 0x6f, 0x6c,
	0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x66, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6e, 0x67, 0x61,
	0x6e, 0x67, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x61, 0x6e, 0x67, 0x61, 0x6e,
	0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x61, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x64, 0x69, 0x61, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x6e, 0x67,
	0x61, 0x6e, 0x67, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x77, 0x61, 0x6e, 0x67,
	0x61, 0x6e, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x65, 0x6e, 0x67, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x05, 0x70, 0x65, 0x6e, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x75,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x71, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x75, 0x61, 0x6e, 0x70, 0x61, 0x69, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08,
	0x68, 0x75, 0x61, 0x6e, 0x70, 0x61, 0x69, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6a, 0x53, 0x65, 0x61, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x61, 0x70, 0x12, 0x35, 0x0a, 0x07, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6a, 0x53,
	0x65, 0x61, 0x74, 0x2e, 0x54, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x6e, 0x47, 0x61, 0x6e, 0x67, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x47, 0x61, 0x6e, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07,
	0x67, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x6e, 0x50, 0x65,
	0x6e, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x50, 0x65, 0x6e,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x6e, 0x48, 0x75, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x63, 0x61, 0x6e, 0x48, 0x75, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x43, 0x68,
	0x75, 0x50, 0x61, 0x69, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x43,
	0x68, 0x75, 0x50, 0x61, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x75, 0x6f, 0x48, 0x75, 0x46, 0x61,
	0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x75, 0x6f, 0x48, 0x75, 0x46, 0x61,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x75, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x68, 0x75, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x7a, 0x69, 0x6d, 0x6f, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x7a, 0x69, 0x6d, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x47, 0x61, 0x6e, 0x67, 0x48, 0x75, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x47, 0x61, 0x6e, 0x67, 0x48, 0x75, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x4d,
	0x65, 0x6e, 0x51, 0x69, 0x6e, 0x67, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x4d, 0x65, 0x6e, 0x51, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x5a, 0x68, 0x6f,
	0x6e, 0x67, 0x5a, 0x68, 0x61, 0x6e, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x5a, 0x68, 0x6f, 0x6e, 0x67, 0x5a, 0x68, 0x61, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x73, 0x4a, 0x69, 0x6e, 0x47, 0x6f, 0x75, 0x48, 0x75, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x4a, 0x69, 0x6e, 0x47, 0x6f, 0x75, 0x48, 0x75, 0x12, 0x24, 0x0a, 0x0d, 0x69,
	0x73, 0x51, 0x69, 0x61, 0x6e, 0x67, 0x47, 0x61, 0x6e, 0x67, 0x48, 0x75, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x51, 0x69, 0x61, 0x6e, 0x67, 0x47, 0x61, 0x6e, 0x67, 0x48,
	0x75, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x48, 0x61, 0x69, 0x44, 0x69, 0x48, 0x75, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x61, 0x69, 0x44, 0x69, 0x48, 0x75, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x73, 0x54, 0x69, 0x61, 0x6e, 0x48, 0x75, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x54, 0x69, 0x61, 0x6e, 0x48, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x44, 0x69, 0x48, 0x75, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44,
	0x69, 0x48, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x69, 0x6e, 0x67, 0x79, 0x69, 0x73, 0x65, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x71, 0x69, 0x6e, 0x67, 0x79, 0x69, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x66, 0x61, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x66, 0x61,
	0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x61, 0x6e, 0x67, 0x47, 0x61, 0x6e,
	0x67, 0x53, 0x65, 0x61, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x46, 0x61, 0x6e, 0x67, 0x47, 0x61, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x75, 0x6d, 0x6f, 0x66, 0x67, 0x65, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6e, 0x75, 0x6d, 0x6f, 0x66, 0x67, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x61,
	0x6e, 0x67, 0x61, 0x6e, 0x67, 0x73, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69,
	0x61, 0x6e, 0x67, 0x61, 0x6e, 0x67, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x0c, 0x54, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d,
	0x6a, 0x54, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xf1, 0x05, 0x0a, 0x0a, 0x4d, 0x6a, 0x47, 0x61, 0x6d, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6a, 0x52, 0x6f, 0x6f,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4d, 0x6a, 0x53, 0x65, 0x61, 0x74, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x61, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x51, 0x75, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x51, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x75, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x50, 0x61, 0x69, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x75, 0x50, 0x61, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x48, 0x75, 0x70, 0x61, 0x69, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x48, 0x75, 0x70, 0x61,
	0x69, 0x12, 0x24, 0x0a, 0x0d, 0x79, 0x69, 0x70, 0x61, 0x6f, 0x64, 0x75, 0x6f, 0x78, 0x69, 0x61,
	0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x79, 0x69, 0x70, 0x61, 0x6f, 0x64,
	0x75, 0x6f, 0x78, 0x69, 0x61, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61, 0x6e, 0x67, 0x70,
	0x61, 0x6f, 0x73, 0x68, 0x75, 0x6d, 0x75, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66,
	0x61, 0x6e, 0x67, 0x70, 0x61, 0x6f, 0x73, 0x68, 0x75, 0x6d, 0x75, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68,
	0x75, 0x70, 0x61, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09,
	0x68, 0x75, 0x70, 0x61, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x75,
	0x70, 0x61, 0x69, 0x43, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68,
	0x75, 0x70, 0x61, 0x69, 0x43, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x75, 0x61, 0x6e, 0x70,
	0x61, 0x69, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x68, 0x75, 0x61, 0x6e, 0x70, 0x61, 0x69, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x43, 0x0a,
	0x10, 0x71, 0x69, 0x61, 0x6e, 0x67, 0x47, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4d, 0x6a, 0x51, 0x69, 0x61, 0x6e, 0x67, 0x47, 0x61, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x10, 0x71, 0x69, 0x61, 0x6e, 0x67, 0x47, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x75, 0x50, 0x61, 0x69, 0x53,
	0x65, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x48,
	0x75, 0x50, 0x61, 0x69, 0x53, 0x65, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x46, 0x61, 0x6e, 0x67, 0x47, 0x61, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x61, 0x6e, 0x67, 0x47, 0x61, 0x6e, 0x67,
	0x53, 0x65, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0xa8, 0x02, 0x0a, 0x06, 0x4d, 0x6a, 0x52,
	0x6f, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x05, 0x73, 0x65, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6a, 0x53, 0x65, 0x61, 0x74, 0x52, 0x05, 0x73, 0x65,
	0x61, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6a, 0x52, 0x6f, 0x6f,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x26, 0x0a, 0x02, 0x64,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4d, 0x6a, 0x44, 0x69, 0x73, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x02, 0x64, 0x72, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mahjong_proto_rawDescOnce sync.Once
	file_mahjong_proto_rawDescData = file_mahjong_proto_rawDesc
)

func file_mahjong_proto_rawDescGZIP() []byte {
	file_mahjong_proto_rawDescOnce.Do(func() {
		file_mahjong_proto_rawDescData = protoimpl.X.CompressGZIP(file_mahjong_proto_rawDescData)
	})
	return file_mahjong_proto_rawDescData
}

var file_mahjong_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_mahjong_proto_goTypes = []interface{}{
	(*MjRoomConf)(nil),      // 0: protos.MjRoomConf
	(*MjDissolveData)(nil),  // 1: protos.MjDissolveData
	(*MjTingData)(nil),      // 2: protos.MjTingData
	(*MjActionData)(nil),    // 3: protos.MjActionData
	(*MjQiangGangData)(nil), // 4: protos.MjQiangGangData
	(*MjSeat)(nil),          // 5: protos.MjSeat
	(*MjGameData)(nil),      // 6: protos.MjGameData
	(*MjRoom)(nil),          // 7: protos.MjRoom
	nil,                     // 8: protos.MjSeat.CountMapEntry
	nil,                     // 9: protos.MjSeat.TingMapEntry
}
var file_mahjong_proto_depIdxs = []int32{
	5,  // 0: protos.MjActionData.owner:type_name -> protos.MjSeat
	3,  // 1: protos.MjActionData.ref:type_name -> protos.MjActionData
	5,  // 2: protos.MjQiangGangData.turnSeat:type_name -> protos.MjSeat
	5,  // 3: protos.MjQiangGangData.seatData:type_name -> protos.MjSeat
	6,  // 4: protos.MjSeat.game:type_name -> protos.MjGameData
	8,  // 5: protos.MjSeat.countMap:type_name -> protos.MjSeat.CountMapEntry
	9,  // 6: protos.MjSeat.tingMap:type_name -> protos.MjSeat.TingMapEntry
	3,  // 7: protos.MjSeat.actions:type_name -> protos.MjActionData
	0,  // 8: protos.MjGameData.conf:type_name -> protos.MjRoomConf
	5,  // 9: protos.MjGameData.gameSeats:type_name -> protos.MjSeat
	4,  // 10: protos.MjGameData.qiangGangContext:type_name -> protos.MjQiangGangData
	5,  // 11: protos.MjRoom.seats:type_name -> protos.MjSeat
	0,  // 12: protos.MjRoom.conf:type_name -> protos.MjRoomConf
	1,  // 13: protos.MjRoom.dr:type_name -> protos.MjDissolveData
	2,  // 14: protos.MjSeat.TingMapEntry.value:type_name -> protos.MjTingData
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_mahjong_proto_init() }
func file_mahjong_proto_init() {
	if File_mahjong_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mahjong_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MjRoomConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MjDissolveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MjTingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MjActionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MjQiangGangData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MjSeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MjGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MjRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mahjong_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mahjong_proto_goTypes,
		DependencyIndexes: file_mahjong_proto_depIdxs,
		MessageInfos:      file_mahjong_proto_msgTypes,
	}.Build()
	File_mahjong_proto = out.File
	file_mahjong_proto_rawDesc = nil
	file_mahjong_proto_goTypes = nil
	file_mahjong_proto_depIdxs = nil
}
